name: build mediaProxy

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Connection to Actions'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest]
        go-version: [ '1.21' ]
    name: Build
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl  # 使用更稳定的Ubuntu专用包[1](@ref)
          upx --version  # 验证安装

      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
          
      - name: SSH Connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
          
      - name: Build Go with UPX Compression
        run: |
          set +e
          # 定义目标平台数组
          platforms=(
            "linux/386" "linux/amd64" "linux/arm" "linux/arm64"
            "linux/mips" "linux/mips64" "linux/mipsle" "linux/mips64le"
            "darwin/amd64" "darwin/arm64"
            "windows/386:.exe" "windows/amd64:.exe"
            "freebsd/386" "freebsd/amd64"
            "android/arm64" "android/arm"
          )

          # 遍历所有平台进行编译和压缩
          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            EXTENSION=""
            
            # 处理带扩展名的平台（如Windows）
            if [[ "$GOARCH" == *":"* ]]; then
              EXTENSION=${GOARCH#*:}
              GOARCH=${GOARCH%:*}
            fi

            OUTPUT="mediaProxy-${GOOS}-${GOARCH}${EXTENSION}"
            
            echo "▶ Building $OUTPUT"
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH \
              go build -ldflags="-X main.Version=${{ github.sha }}" \
              -tags netgo -installsuffix netgo -o "$OUTPUT"
            
            echo "⚡ Compressing $OUTPUT with UPX"
            upx --best --lzma "$OUTPUT" -o "${OUTPUT%.*}-compressed${EXTENSION}"  # 保留原文件[3](@ref)
          done

          echo "FILESNAME=$PWD" >> $GITHUB_ENV
  
      - name: Bump Version and Push Tag
        id: bump
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Compressed Binaries to Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump.outputs.new_tag }}
          files: |
            *-compressed*
          draft: false
          prerelease: false
          body: |
            ### UPX压缩效果报告
            - 压缩算法：LZMA (--best模式)[1](@ref)
            - 预期体积缩减：50%-70%[3,5](@ref)
            - 启动延迟：增加约10-100ms解压时间[3](@ref)

      - name: Cleanup Old Artifacts
        run: |
          # 删除未压缩的原始文件（保留压缩版）
          rm -f mediaProxy-*[!.][!c][!o][!m][!p][!r][!e][!s][!s][!e][!d]*

      - name: Delete Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove Old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
